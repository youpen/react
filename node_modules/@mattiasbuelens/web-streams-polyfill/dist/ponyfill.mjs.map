{"version":3,"file":"ponyfill.mjs","sources":["../src/stub/number-isinteger.js","../src/stub/symbol.js","../src/utils.js","../src/stub/number-isnan.js","../spec/reference-implementation/lib/helpers.js","../src/stub/assert.js","../spec/reference-implementation/lib/utils.js","../spec/reference-implementation/lib/queue-with-sizes.js","../spec/reference-implementation/lib/writable-stream.js","../spec/reference-implementation/lib/readable-stream.js","../spec/reference-implementation/lib/byte-length-queuing-strategy.js","../spec/reference-implementation/lib/count-queuing-strategy.js","../spec/reference-implementation/lib/transform-stream.js"],"sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#Polyfill\nconst NumberIsInteger = Number.isInteger || function (value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value;\n};\n\nexport default NumberIsInteger;\n","const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n  Symbol :\n  description => `Symbol(${description})`;\n\nexport default SymbolPolyfill;\n","export function noop() {\n  // do nothing\n}\n\nfunction getGlobals() {\n  /* global self, window, global */\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","'use strict';\nconst assert = require('better-assert');\n\nconst isFakeDetached = Symbol('is \"detached\" for our purposes');\n\nfunction IsPropertyKey(argument) {\n  return typeof argument === 'string' || typeof argument === 'symbol';\n}\n\nexports.typeIsObject = x => (typeof x === 'object' && x !== null) || typeof x === 'function';\n\nexports.createDataProperty = (o, p, v) => {\n  assert(exports.typeIsObject(o));\n  Object.defineProperty(o, p, { value: v, writable: true, enumerable: true, configurable: true });\n};\n\nexports.createArrayFromList = elements => {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice();\n};\n\nexports.ArrayBufferCopy = (dest, destOffset, src, srcOffset, n) => {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n};\n\nexports.IsFiniteNonNegativeNumber = v => {\n  if (exports.IsNonNegativeNumber(v) === false) {\n    return false;\n  }\n\n  if (v === Infinity) {\n    return false;\n  }\n\n  return true;\n};\n\nexports.IsNonNegativeNumber = v => {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (Number.isNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction Call(F, V, args) {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexports.Call = Call;\n\nexports.CreateAlgorithmFromUnderlyingMethod = (underlyingObject, methodName, algoArgCount, extraArgs) => {\n  assert(underlyingObject !== undefined);\n  assert(IsPropertyKey(methodName));\n  assert(algoArgCount === 0 || algoArgCount === 1);\n  assert(Array.isArray(extraArgs));\n  const method = underlyingObject[methodName];\n  if (method !== undefined) {\n    if (typeof method !== 'function') {\n      throw new TypeError(`${method} is not a method`);\n    }\n    switch (algoArgCount) {\n      case 0: {\n        return () => {\n          return PromiseCall(method, underlyingObject, extraArgs);\n        };\n      }\n\n      case 1: {\n        return arg => {\n          const fullArgs = [arg].concat(extraArgs);\n          return PromiseCall(method, underlyingObject, fullArgs);\n        };\n      }\n    }\n  }\n  return () => Promise.resolve();\n};\n\nexports.InvokeOrNoop = (O, P, args) => {\n  assert(O !== undefined);\n  assert(IsPropertyKey(P));\n  assert(Array.isArray(args));\n\n  const method = O[P];\n  if (method === undefined) {\n    return undefined;\n  }\n\n  return Call(method, O, args);\n};\n\nfunction PromiseCall(F, V, args) {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return Promise.resolve(Call(F, V, args));\n  } catch (value) {\n    return Promise.reject(value);\n  }\n}\n\nexports.PromiseCall = PromiseCall;\n\n// Not implemented correctly\nexports.TransferArrayBuffer = O => {\n  assert(!exports.IsDetachedBuffer(O));\n  const transferredIshVersion = O.slice();\n\n  // This is specifically to fool tests that test \"is transferred\" by taking a non-zero-length\n  // ArrayBuffer and checking if its byteLength starts returning 0.\n  Object.defineProperty(O, 'byteLength', {\n    get() {\n      return 0;\n    }\n  });\n  O[isFakeDetached] = true;\n\n  return transferredIshVersion;\n};\n\n// Not implemented correctly\nexports.IsDetachedBuffer = O => {\n  return isFakeDetached in O;\n};\n\nexports.ValidateAndNormalizeHighWaterMark = highWaterMark => {\n  highWaterMark = Number(highWaterMark);\n  if (Number.isNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('highWaterMark property of a queuing strategy must be non-negative and non-NaN');\n  }\n\n  return highWaterMark;\n};\n\nexports.MakeSizeAlgorithmFromSizeFunction = size => {\n  if (size === undefined) {\n    return () => 1;\n  }\n  if (typeof size !== 'function') {\n    throw new TypeError('size property of a queuing strategy must be a function');\n  }\n  return chunk => size(chunk);\n};\n","import { noop } from '../utils';\n\nexport default function assert() {\n  // do nothing\n}\n\nassert.AssertionError = noop;\n","'use strict';\nconst assert = require('assert');\n\nexports.rethrowAssertionErrorRejection = e => {\n  // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n  // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n  // expect any errors, but assertion errors are always problematic.\n  if (e && e instanceof assert.AssertionError) {\n    setTimeout(() => {\n      throw e;\n    }, 0);\n  }\n};\n","'use strict';\nconst assert = require('better-assert');\nconst { IsFiniteNonNegativeNumber } = require('./helpers.js');\n\nexports.DequeueValue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift();\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n};\n\nexports.EnqueueValueWithSize = (container, value, size) => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  size = Number(size);\n  if (!IsFiniteNonNegativeNumber(size)) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n};\n\nexports.PeekQueueValue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue[0];\n  return pair.value;\n};\n\nexports.ResetQueue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = [];\n  container._queueTotalSize = 0;\n};\n","'use strict';\nconst assert = require('better-assert');\n\n// Calls to verbose() are purely for debugging the reference implementation and tests. They are not part of the standard\n// and do not appear in the standard text.\nconst verbose = require('debug')('streams:writable-stream:verbose');\n\nconst { CreateAlgorithmFromUnderlyingMethod, InvokeOrNoop, ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction, typeIsObject } = require('./helpers.js');\nconst { rethrowAssertionErrorRejection } = require('./utils.js');\nconst { DequeueValue, EnqueueValueWithSize, PeekQueueValue, ResetQueue } = require('./queue-with-sizes.js');\n\nconst AbortSteps = Symbol('[[AbortSteps]]');\nconst ErrorSteps = Symbol('[[ErrorSteps]]');\n\nclass WritableStream {\n  constructor(underlyingSink = {}, strategy = {}) {\n    InitializeWritableStream(this);\n\n    const size = strategy.size;\n    let highWaterMark = strategy.highWaterMark;\n\n    const type = underlyingSink.type;\n\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(size);\n    if (highWaterMark === undefined) {\n      highWaterMark = 1;\n    }\n    highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  get locked() {\n    if (IsWritableStream(this) === false) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  abort(reason) {\n    if (IsWritableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  getWriter() {\n    if (IsWritableStream(this) === false) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nmodule.exports = {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter(stream) {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1,\n                              sizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n\n  const stream = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream(stream) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = [];\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsWritableStreamLocked(stream) {\n  assert(IsWritableStream(stream) === true);\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream, reason) {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return Promise.resolve(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest._promise = promise;\n\n  if (wasAlreadyErroring === false) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream) {\n  assert(IsWritableStreamLocked(stream) === true);\n  assert(stream._state === 'writable');\n\n  const promise = new Promise((resolve, reject) => {\n    const writeRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream, error) {\n  verbose('WritableStreamDealWithRejection(stream, %o)', error);\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream, reason) {\n  verbose('WritableStreamStartErroring(stream, %o)', reason);\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (WritableStreamHasOperationMarkedInFlight(stream) === false && controller._started === true) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream) {\n  verbose('WritableStreamFinishErroring()');\n  assert(stream._state === 'erroring');\n  assert(WritableStreamHasOperationMarkedInFlight(stream) === false);\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  for (const writeRequest of stream._writeRequests) {\n    writeRequest._reject(storedError);\n  }\n  stream._writeRequests = [];\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring === true) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  promise.then(\n      () => {\n        abortRequest._resolve();\n        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      },\n      reason => {\n        abortRequest._reject(reason);\n        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream, error) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream, error) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream) {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream) {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    verbose('WritableStreamHasOperationMarkedInFlight() is false');\n    return false;\n  }\n\n  verbose('WritableStreamHasOperationMarkedInFlight() is true');\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n  verbose('WritableStreamRejectCloseAndClosedPromiseIfNeeded()');\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n    writer._closedPromise.catch(() => {});\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream, backpressure) {\n  assert(stream._state === 'writable');\n  assert(WritableStreamCloseQueuedOrInFlight(stream) === false);\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure === true) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(backpressure === false);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\nclass WritableStreamDefaultWriter {\n  constructor(stream) {\n    if (IsWritableStream(stream) === false) {\n      throw new TypeError('WritableStreamDefaultWriter can only be constructed with a WritableStream instance');\n    }\n    if (IsWritableStreamLocked(stream) === true) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._backpressure === true) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      this._readyPromise.catch(() => {});\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      this._readyPromise.catch(() => {});\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n      this._closedPromise.catch(() => {});\n    }\n  }\n\n  get closed() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  get desiredSize() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  get ready() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  abort(reason) {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return Promise.reject(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  close() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return Promise.reject(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) === true) {\n      return Promise.reject(new TypeError('cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  releaseLock() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  write(chunk) {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return Promise.reject(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer, reason) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return Promise.reject(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(WritableStreamCloseQueuedOrInFlight(stream) === false);\n\n  const promise = new Promise((resolve, reject) => {\n    const closeRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  if (stream._backpressure === true && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === 'closed') {\n    return Promise.resolve();\n  }\n\n  if (state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n  writer._closedPromise.catch(() => {});\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n  verbose('WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, %o)', error);\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n  writer._readyPromise.catch(() => {});\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer) {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    'Writer was released and can no longer be used to monitor the stream\\'s closedness');\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined;\n}\n\nfunction WritableStreamDefaultWriterWrite(writer, chunk) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return Promise.reject(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === 'closed') {\n    return Promise.reject(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nclass WritableStreamDefaultController {\n  constructor() {\n    throw new TypeError('WritableStreamDefaultController cannot be constructed explicitly');\n  }\n\n  error(e) {\n    if (IsWritableStreamDefaultController(this) === false) {\n      throw new TypeError(\n        'WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  [AbortSteps](reason) {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                              abortAlgorithm, highWaterMark, sizeAlgorithm) {\n  assert(IsWritableStream(stream) === true);\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined;\n  controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = Promise.resolve(startResult);\n  startPromise.then(\n      () => {\n        assert(stream._state === 'writable' || stream._state === 'erroring');\n        controller._started = true;\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n      },\n      r => {\n        assert(stream._state === 'writable' || stream._state === 'erroring');\n        controller._started = true;\n        WritableStreamDealWithRejection(stream, r);\n      }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n  assert(underlyingSink !== undefined);\n\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingSink, 'start', [controller]);\n  }\n\n  const writeAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'write', 1, [controller]);\n  const closeAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'close', 0, []);\n  const abortAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'abort', 1, []);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller) {\n  controller._writeAlgorithm = undefined;\n  controller._closeAlgorithm = undefined;\n  controller._abortAlgorithm = undefined;\n  controller._strategySizeAlgorithm = undefined;\n}\n\nfunction WritableStreamDefaultControllerClose(controller) {\n  EnqueueValueWithSize(controller, 'close', 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller) {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n  const writeRecord = { chunk };\n\n  try {\n    EnqueueValueWithSize(controller, writeRecord, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n  verbose('WritableStreamDefaultControllerAdvanceQueueIfNeeded()');\n  const stream = controller._controlledWritableStream;\n\n  if (controller._started === false) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return;\n  }\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const writeRecord = PeekQueueValue(controller);\n  if (writeRecord === 'close') {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, writeRecord.chunk);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  sinkClosePromise.then(\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  sinkWritePromise.then(\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (WritableStreamCloseQueuedOrInFlight(stream) === false && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller) {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller, error) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name) {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name) {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer) {\n  writer._closedPromise = new Promise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n  writer._closedPromise = Promise.reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer) {\n  writer._closedPromise = Promise.resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterClosedPromiseReject(writer, reason) {\n  assert(writer._closedPromise_resolve !== undefined);\n  assert(writer._closedPromise_reject !== undefined);\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer, reason) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  writer._closedPromise = Promise.reject(reason);\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResolve(writer) {\n  assert(writer._closedPromise_resolve !== undefined);\n  assert(writer._closedPromise_reject !== undefined);\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer) {\n  verbose('defaultWriterReadyPromiseInitialize()');\n  writer._readyPromise = new Promise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n  verbose('defaultWriterReadyPromiseInitializeAsRejected(writer, %o)', reason);\n  writer._readyPromise = Promise.reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer) {\n  verbose('defaultWriterReadyPromiseInitializeAsResolved()');\n  writer._readyPromise = Promise.resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n\nfunction defaultWriterReadyPromiseReject(writer, reason) {\n  verbose('defaultWriterReadyPromiseReject(writer, %o)', reason);\n  assert(writer._readyPromise_resolve !== undefined);\n  assert(writer._readyPromise_reject !== undefined);\n\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer) {\n  verbose('defaultWriterReadyPromiseReset()');\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  writer._readyPromise = new Promise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer, reason) {\n  verbose('defaultWriterReadyPromiseResetToRejected(writer, %o)', reason);\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  writer._readyPromise = Promise.reject(reason);\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseResolve(writer) {\n  verbose('defaultWriterReadyPromiseResolve()');\n  assert(writer._readyPromise_resolve !== undefined);\n  assert(writer._readyPromise_reject !== undefined);\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","'use strict';\nconst assert = require('better-assert');\nconst { ArrayBufferCopy, CreateAlgorithmFromUnderlyingMethod, IsFiniteNonNegativeNumber, InvokeOrNoop,\n        IsDetachedBuffer, TransferArrayBuffer, ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction, createArrayFromList, typeIsObject } = require('./helpers.js');\nconst { rethrowAssertionErrorRejection } = require('./utils.js');\nconst { DequeueValue, EnqueueValueWithSize, ResetQueue } = require('./queue-with-sizes.js');\nconst { AcquireWritableStreamDefaultWriter, IsWritableStream, IsWritableStreamLocked,\n        WritableStreamAbort, WritableStreamDefaultWriterCloseWithErrorPropagation,\n        WritableStreamDefaultWriterRelease, WritableStreamDefaultWriterWrite, WritableStreamCloseQueuedOrInFlight } =\n      require('./writable-stream.js');\n\nconst CancelSteps = Symbol('[[CancelSteps]]');\nconst PullSteps = Symbol('[[PullSteps]]');\n\nclass ReadableStream {\n  constructor(underlyingSource = {}, strategy = {}) {\n    InitializeReadableStream(this);\n\n    const size = strategy.size;\n    let highWaterMark = strategy.highWaterMark;\n\n    const type = underlyingSource.type;\n    const typeString = String(type);\n    if (typeString === 'bytes') {\n      if (size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n\n      if (highWaterMark === undefined) {\n        highWaterMark = 0;\n      }\n      highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n      SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n    } else if (type === undefined) {\n      const sizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(size);\n\n      if (highWaterMark === undefined) {\n        highWaterMark = 1;\n      }\n      highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n    } else {\n      throw new RangeError('Invalid type is specified');\n    }\n  }\n\n  get locked() {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  cancel(reason) {\n    if (IsReadableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  getReader({ mode } = {}) {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    if (mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    mode = String(mode);\n\n    if (mode === 'byob') {\n      return AcquireReadableStreamBYOBReader(this);\n    }\n\n    throw new RangeError('Invalid mode is specified');\n  }\n\n  pipeThrough({ writable, readable }, options) {\n    if (writable === undefined || readable === undefined) {\n      throw new TypeError('readable and writable arguments must be defined');\n    }\n\n    const promise = this.pipeTo(writable, options);\n\n    ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(promise);\n\n    return readable;\n  }\n\n  pipeTo(dest, { preventClose, preventAbort, preventCancel } = {}) {\n    if (IsReadableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('pipeTo'));\n    }\n    if (IsWritableStream(dest) === false) {\n      return Promise.reject(\n        new TypeError('ReadableStream.prototype.pipeTo\\'s first argument must be a WritableStream'));\n    }\n\n    preventClose = Boolean(preventClose);\n    preventAbort = Boolean(preventAbort);\n    preventCancel = Boolean(preventCancel);\n\n    if (IsReadableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n    }\n    if (IsWritableStreamLocked(dest) === true) {\n      return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n    }\n\n    const reader = AcquireReadableStreamDefaultReader(this);\n    const writer = AcquireWritableStreamDefaultWriter(dest);\n\n    let shuttingDown = false;\n\n    // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n    let currentWrite = Promise.resolve();\n\n    return new Promise((resolve, reject) => {\n      // Using reader and writer, read all chunks from this and write them to dest\n      // - Backpressure must be enforced\n      // - Shutdown must stop all activity\n      function pipeLoop() {\n        if (shuttingDown === true) {\n          return Promise.resolve();\n        }\n\n        return writer._readyPromise.then(() => {\n          return ReadableStreamDefaultReaderRead(reader).then(({ value, done }) => {\n            if (done === true) {\n              return;\n            }\n\n            currentWrite = WritableStreamDefaultWriterWrite(writer, value).catch(() => {});\n          });\n        })\n        .then(pipeLoop);\n      }\n\n      // Errors must be propagated forward\n      isOrBecomesErrored(this, reader._closedPromise, storedError => {\n        if (preventAbort === false) {\n          shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      });\n\n      // Errors must be propagated backward\n      isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n        if (preventCancel === false) {\n          shutdownWithAction(() => ReadableStreamCancel(this, storedError), true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      });\n\n      // Closing must be propagated forward\n      isOrBecomesClosed(this, reader._closedPromise, () => {\n        if (preventClose === false) {\n          shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n        } else {\n          shutdown();\n        }\n      });\n\n      // Closing must be propagated backward\n      if (WritableStreamCloseQueuedOrInFlight(dest) === true || dest._state === 'closed') {\n        const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n        if (preventCancel === false) {\n          shutdownWithAction(() => ReadableStreamCancel(this, destClosed), true, destClosed);\n        } else {\n          shutdown(true, destClosed);\n        }\n      }\n\n      pipeLoop().catch(err => {\n        currentWrite = Promise.resolve();\n        rethrowAssertionErrorRejection(err);\n      });\n\n      function waitForWritesToFinish() {\n        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n        // for that too.\n        const oldCurrentWrite = currentWrite;\n        return currentWrite.then(() => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n      }\n\n      function isOrBecomesErrored(stream, promise, action) {\n        if (stream._state === 'errored') {\n          action(stream._storedError);\n        } else {\n          promise.catch(action).catch(rethrowAssertionErrorRejection);\n        }\n      }\n\n      function isOrBecomesClosed(stream, promise, action) {\n        if (stream._state === 'closed') {\n          action();\n        } else {\n          promise.then(action).catch(rethrowAssertionErrorRejection);\n        }\n      }\n\n      function shutdownWithAction(action, originalIsError, originalError) {\n        if (shuttingDown === true) {\n          return;\n        }\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && WritableStreamCloseQueuedOrInFlight(dest) === false) {\n          waitForWritesToFinish().then(doTheRest);\n        } else {\n          doTheRest();\n        }\n\n        function doTheRest() {\n          action().then(\n            () => finalize(originalIsError, originalError),\n            newError => finalize(true, newError)\n          )\n          .catch(rethrowAssertionErrorRejection);\n        }\n      }\n\n      function shutdown(isError, error) {\n        if (shuttingDown === true) {\n          return;\n        }\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && WritableStreamCloseQueuedOrInFlight(dest) === false) {\n          waitForWritesToFinish().then(() => finalize(isError, error)).catch(rethrowAssertionErrorRejection);\n        } else {\n          finalize(isError, error);\n        }\n      }\n\n      function finalize(isError, error) {\n        WritableStreamDefaultWriterRelease(writer);\n        ReadableStreamReaderGenericRelease(reader);\n\n        if (isError) {\n          reject(error);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  }\n\n  tee() {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return createArrayFromList(branches);\n  }\n}\n\nmodule.exports = {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  ReadableStream,\n  IsReadableStreamDisturbed,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure,\n  ReadableStreamDefaultControllerCanCloseOrEnqueue\n};\n\n// Abstract operations for the ReadableStream.\n\nfunction AcquireReadableStreamBYOBReader(stream) {\n  return new ReadableStreamBYOBReader(stream);\n}\n\nfunction AcquireReadableStreamDefaultReader(stream) {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1,\n                              sizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n\n  const stream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller = Object.create(ReadableStreamDefaultController.prototype);\n\n  SetUpReadableStreamDefaultController(\n      stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 0,\n                                  autoAllocateChunkSize = undefined) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(Number.isInteger(autoAllocateChunkSize) === true);\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  const stream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller = Object.create(ReadableByteStreamController.prototype);\n\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark,\n                                    autoAllocateChunkSize);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nfunction IsReadableStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamDisturbed(stream) {\n  assert(IsReadableStream(stream) === true);\n\n  return stream._disturbed;\n}\n\nfunction IsReadableStreamLocked(stream) {\n  assert(IsReadableStream(stream) === true);\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamTee(stream, cloneForBranch2) {\n  assert(IsReadableStream(stream) === true);\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader(stream);\n\n  let closedOrErrored = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1;\n  let reason2;\n  let branch1;\n  let branch2;\n\n  let resolveCancelPromise;\n  const cancelPromise = new Promise(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm() {\n    return ReadableStreamDefaultReaderRead(reader).then(result => {\n      assert(typeIsObject(result));\n      const value = result.value;\n      const done = result.done;\n      assert(typeof done === 'boolean');\n\n      if (done === true && closedOrErrored === false) {\n        if (canceled1 === false) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n        }\n        if (canceled2 === false) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n        }\n        closedOrErrored = true;\n      }\n\n      if (closedOrErrored === true) {\n        return;\n      }\n\n      const value1 = value;\n      const value2 = value;\n\n      // There is no way to access the cloning code right now in the reference implementation.\n      // If we add one then we'll need an implementation for serializable objects.\n      // if (canceled2 === false && cloneForBranch2 === true) {\n      //   value2 = StructuredDeserialize(StructuredSerialize(value2));\n      // }\n\n      if (canceled1 === false) {\n        ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, value1);\n      }\n\n      if (canceled2 === false) {\n        ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, value2);\n      }\n    });\n  }\n\n  function cancel1Algorithm(reason) {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2 === true) {\n      const compositeReason = createArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason) {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1 === true) {\n      const compositeReason = createArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {}\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  reader._closedPromise.catch(r => {\n    if (closedOrErrored === true) {\n      return;\n    }\n\n    ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n    closedOrErrored = true;\n  });\n\n  return [branch1, branch2];\n}\n\n// ReadableStream API exposed for controllers.\n\nfunction ReadableStreamAddReadIntoRequest(stream, forAuthorCode) {\n  assert(IsReadableStreamBYOBReader(stream._reader) === true);\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  const promise = new Promise((resolve, reject) => {\n    const readIntoRequest = {\n      _resolve: resolve,\n      _reject: reject,\n      _forAuthorCode: forAuthorCode\n    };\n\n    stream._reader._readIntoRequests.push(readIntoRequest);\n  });\n\n  return promise;\n}\n\nfunction ReadableStreamAddReadRequest(stream, forAuthorCode) {\n  assert(IsReadableStreamDefaultReader(stream._reader) === true);\n  assert(stream._state === 'readable');\n\n  const promise = new Promise((resolve, reject) => {\n    const readRequest = {\n      _resolve: resolve,\n      _reject: reject,\n      _forAuthorCode: forAuthorCode\n    };\n\n    stream._reader._readRequests.push(readRequest);\n  });\n\n  return promise;\n}\n\nfunction ReadableStreamCancel(stream, reason) {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return Promise.resolve(undefined);\n  }\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return sourceCancelPromise.then(() => undefined);\n}\n\nfunction ReadableStreamClose(stream) {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return undefined;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === true) {\n    for (const { _resolve, _forAuthorCode } of reader._readRequests) {\n      _resolve(ReadableStreamCreateReadResult(undefined, true, _forAuthorCode));\n    }\n    reader._readRequests = [];\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  return undefined;\n}\n\nfunction ReadableStreamCreateReadResult(value, done, forAuthorCode) {\n  let prototype = null;\n  if (forAuthorCode === true) {\n    prototype = Object.prototype;\n  }\n  assert(typeof done === 'boolean');\n  const obj = Object.create(prototype);\n  Object.defineProperty(obj, 'value', { value, enumerable: true, writable: true, configurable: true });\n  Object.defineProperty(obj, 'done', { value: done, enumerable: true, writable: true, configurable: true });\n  return obj;\n}\n\nfunction ReadableStreamError(stream, e) {\n  assert(IsReadableStream(stream) === true);\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return undefined;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === true) {\n    for (const readRequest of reader._readRequests) {\n      readRequest._reject(e);\n    }\n\n    reader._readRequests = [];\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    for (const readIntoRequest of reader._readIntoRequests) {\n      readIntoRequest._reject(e);\n    }\n\n    reader._readIntoRequests = [];\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n  reader._closedPromise.catch(() => {});\n}\n\nfunction ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n  const reader = stream._reader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift();\n  readIntoRequest._resolve(ReadableStreamCreateReadResult(chunk, done, readIntoRequest._forAuthorCode));\n}\n\nfunction ReadableStreamFulfillReadRequest(stream, chunk, done) {\n  const reader = stream._reader;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift();\n  readRequest._resolve(ReadableStreamCreateReadResult(chunk, done, readRequest._forAuthorCode));\n}\n\nfunction ReadableStreamGetNumReadIntoRequests(stream) {\n  return stream._reader._readIntoRequests.length;\n}\n\nfunction ReadableStreamGetNumReadRequests(stream) {\n  return stream._reader._readRequests.length;\n}\n\nfunction ReadableStreamHasBYOBReader(stream) {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (IsReadableStreamBYOBReader(reader) === false) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamHasDefaultReader(stream) {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === false) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nclass ReadableStreamDefaultReader {\n  constructor(stream) {\n    if (IsReadableStream(stream) === false) {\n      throw new TypeError('ReadableStreamDefaultReader can only be constructed with a ReadableStream instance');\n    }\n    if (IsReadableStreamLocked(stream) === true) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = [];\n  }\n\n  get closed() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  cancel(reason) {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  read() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('read from'));\n    }\n\n    return ReadableStreamDefaultReaderRead(this, true);\n  }\n\n  releaseLock() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nclass ReadableStreamBYOBReader {\n  constructor(stream) {\n    if (!IsReadableStream(stream)) {\n      throw new TypeError('ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a ' +\n          'byte source');\n    }\n    if (IsReadableByteStreamController(stream._readableStreamController) === false) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n          'source');\n    }\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = [];\n  }\n\n  get closed() {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  cancel(reason) {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  read(view) {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('read from'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return Promise.reject(new TypeError('view must be an array buffer view'));\n    }\n\n    if (IsDetachedBuffer(view.buffer) === true) {\n      return Promise.reject(new TypeError('Cannot read into a view onto a detached ArrayBuffer'));\n    }\n\n    if (view.byteLength === 0) {\n      return Promise.reject(new TypeError('view must have non-zero byteLength'));\n    }\n\n    return ReadableStreamBYOBReaderRead(this, view, true);\n  }\n\n  releaseLock() {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\n// Abstract operations for the readers.\n\nfunction IsReadableStreamBYOBReader(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamDefaultReader(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamReaderGenericInitialize(reader, stream) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n    reader._closedPromise.catch(() => {});\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nfunction ReadableStreamReaderGenericCancel(reader, reason) {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nfunction ReadableStreamReaderGenericRelease(reader) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n        reader,\n        new TypeError('Reader was released and can no longer be used to monitor the stream\\'s closedness'));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n        reader,\n        new TypeError('Reader was released and can no longer be used to monitor the stream\\'s closedness'));\n  }\n  reader._closedPromise.catch(() => {});\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined;\n}\n\nfunction ReadableStreamBYOBReaderRead(reader, view, forAuthorCode = false) {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  // Controllers must implement this.\n  return ReadableByteStreamControllerPullInto(stream._readableStreamController, view, forAuthorCode);\n}\n\nfunction ReadableStreamDefaultReaderRead(reader, forAuthorCode = false) {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return Promise.resolve(ReadableStreamCreateReadResult(undefined, true, forAuthorCode));\n  }\n\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(stream._state === 'readable');\n\n  return stream._readableStreamController[PullSteps](forAuthorCode);\n}\n\n// Controllers\n\nclass ReadableStreamDefaultController {\n  constructor() {\n    throw new TypeError();\n  }\n\n  get desiredSize() {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  close() {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(this) === false) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  enqueue(chunk) {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(this) === false) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  error(e) {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  [CancelSteps](reason) {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  [PullSteps](forAuthorCode) {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested === true && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      return Promise.resolve(ReadableStreamCreateReadResult(chunk, false, forAuthorCode));\n    }\n\n    const pendingPromise = ReadableStreamAddReadRequest(stream, forAuthorCode);\n    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    return pendingPromise;\n  }\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (shouldPull === false) {\n    return undefined;\n  }\n\n  if (controller._pulling === true) {\n    controller._pullAgain = true;\n    return undefined;\n  }\n\n  assert(controller._pullAgain === false);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  pullPromise.then(\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain === true) {\n        controller._pullAgain = false;\n        return ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n      return undefined;\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n\n  return undefined;\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller) {\n  const stream = controller._controlledReadableStream;\n\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === false) {\n    return false;\n  }\n\n  if (controller._started === false) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller) {\n  controller._pullAlgorithm = undefined;\n  controller._cancelAlgorithm = undefined;\n  controller._strategySizeAlgorithm = undefined;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction ReadableStreamDefaultControllerClose(controller) {\n  const stream = controller._controlledReadableStream;\n\n  assert(ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === true);\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nfunction ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n  const stream = controller._controlledReadableStream;\n\n  assert(ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === true);\n\n  if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n\n  return undefined;\n}\n\nfunction ReadableStreamDefaultControllerError(controller, e) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nfunction ReadableStreamDefaultControllerGetDesiredSize(controller) {\n  const stream = controller._controlledReadableStream;\n  const state = stream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nfunction ReadableStreamDefaultControllerHasBackpressure(controller) {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller) === true) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n  const state = controller._controlledReadableStream._state;\n\n  if (controller._closeRequested === false && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nfunction SetUpReadableStreamDefaultController(\n  stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined;\n  controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  Promise.resolve(startResult).then(\n    () => {\n      controller._started = true;\n\n      assert(controller._pulling === false);\n      assert(controller._pullAgain === false);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark,\n                                                                  sizeAlgorithm) {\n  assert(underlyingSource !== undefined);\n\n  const controller = Object.create(ReadableStreamDefaultController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingSource, 'start', [controller]);\n  }\n\n  const pullAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSource, 'pull', 0, [controller]);\n  const cancelAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSource, 'cancel', 1, []);\n\n  SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm,\n                                       highWaterMark, sizeAlgorithm);\n}\n\nclass ReadableStreamBYOBRequest {\n  constructor() {\n    throw new TypeError('ReadableStreamBYOBRequest cannot be used directly');\n  }\n\n  get view() {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  respond(bytesWritten) {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('respond');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view.buffer) === true) {\n      throw new TypeError('The BYOB request\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  respondWithNewView(view) {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('respond');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (IsDetachedBuffer(view.buffer) === true) {\n      throw new TypeError('The supplied view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nclass ReadableByteStreamController {\n  constructor() {\n    throw new TypeError('ReadableByteStreamController constructor cannot be used directly');\n  }\n\n  get byobRequest() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    if (this._byobRequest === undefined && this._pendingPullIntos.length > 0) {\n      const firstDescriptor = this._pendingPullIntos[0];\n      const view = new Uint8Array(firstDescriptor.buffer,\n                                  firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                  firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n      const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, this, view);\n      this._byobRequest = byobRequest;\n    }\n\n    return this._byobRequest;\n  }\n\n  get desiredSize() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  close() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested === true) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  enqueue(chunk) {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    if (this._closeRequested === true) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('You can only enqueue array buffer views when using a ReadableByteStreamController');\n    }\n\n    if (IsDetachedBuffer(chunk.buffer) === true) {\n      throw new TypeError('Cannot enqueue a view onto a detached ArrayBuffer');\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  error(e) {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  [CancelSteps](reason) {\n    if (this._pendingPullIntos.length > 0) {\n      const firstDescriptor = this._pendingPullIntos[0];\n      firstDescriptor.bytesFilled = 0;\n    }\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  [PullSteps](forAuthorCode) {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream) === true);\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift();\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      let view;\n      try {\n        view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n      } catch (viewE) {\n        return Promise.reject(viewE);\n      }\n\n      return Promise.resolve(ReadableStreamCreateReadResult(view, false, forAuthorCode));\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        return Promise.reject(bufferE);\n      }\n\n      const pullIntoDescriptor = {\n        buffer,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        ctor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    const promise = ReadableStreamAddReadRequest(stream, forAuthorCode);\n\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n\n    return promise;\n  }\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nfunction IsReadableByteStreamController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamBYOBRequest(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller) {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (shouldPull === false) {\n    return undefined;\n  }\n\n  if (controller._pulling === true) {\n    controller._pullAgain = true;\n    return undefined;\n  }\n\n  assert(controller._pullAgain === false);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  pullPromise.then(\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain === true) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n\n  return undefined;\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = [];\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.ctor(\n      pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue[0];\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    ArrayBufferCopy(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (ready === false) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos[0] === pullIntoDescriptor);\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested === true) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n  if (controller._byobRequest === undefined) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined;\n  controller._byobRequest._view = undefined;\n  controller._byobRequest = undefined;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n  assert(controller._closeRequested === false);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos[0];\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerPullInto(controller, view, forAuthorCode) {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = view.constructor.BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor;\n\n  const buffer = TransferArrayBuffer(view.buffer);\n  const pullIntoDescriptor = {\n    buffer,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    return ReadableStreamAddReadIntoRequest(stream, forAuthorCode);\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new view.constructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    return Promise.resolve(ReadableStreamCreateReadResult(emptyView, true, forAuthorCode));\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      return Promise.resolve(ReadableStreamCreateReadResult(filledView, false, forAuthorCode));\n    }\n\n    if (controller._closeRequested === true) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      return Promise.reject(e);\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  const promise = ReadableStreamAddReadIntoRequest(stream, forAuthorCode);\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n\n  return promise;\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream) === true) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n  if (pullIntoDescriptor.bytesFilled + bytesWritten > pullIntoDescriptor.byteLength) {\n    throw new RangeError('bytesWritten out of range');\n  }\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    // TODO: Figure out whether we should detach the buffer or not here.\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = pullIntoDescriptor.buffer.slice(end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n  const firstDescriptor = controller._pendingPullIntos[0];\n\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(stream._state === 'readable');\n\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(controller) {\n  const descriptor = controller._pendingPullIntos.shift();\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested === true) {\n    return false;\n  }\n\n  if (controller._started === false) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) === true && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller) {\n  controller._pullAlgorithm = undefined;\n  controller._cancelAlgorithm = undefined;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nfunction ReadableByteStreamControllerClose(controller) {\n  const stream = controller._controlledReadableByteStream;\n\n  assert(controller._closeRequested === false);\n  assert(stream._state === 'readable');\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos[0];\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nfunction ReadableByteStreamControllerEnqueue(controller, chunk) {\n  const stream = controller._controlledReadableByteStream;\n\n  assert(controller._closeRequested === false);\n  assert(stream._state === 'readable');\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (ReadableStreamHasDefaultReader(stream) === true) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream) === true) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(IsReadableStreamLocked(stream) === false);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerError(controller, e) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller) {\n  const stream = controller._controlledReadableByteStream;\n  const state = stream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction ReadableByteStreamControllerRespond(controller, bytesWritten) {\n  bytesWritten = Number(bytesWritten);\n  if (IsFiniteNonNegativeNumber(bytesWritten) === false) {\n    throw new RangeError('bytesWritten must be a finite');\n  }\n\n  assert(controller._pendingPullIntos.length > 0);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nfunction ReadableByteStreamControllerRespondWithNewView(controller, view) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos[0];\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.byteLength !== view.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n\n  firstDescriptor.buffer = view.buffer;\n\n  ReadableByteStreamControllerRespondInternal(controller, view.byteLength);\n}\n\nfunction SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm,\n                                           highWaterMark, autoAllocateChunkSize) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(Number.isInteger(autoAllocateChunkSize) === true);\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = [];\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  Promise.resolve(startResult).then(\n      () => {\n        controller._started = true;\n\n        assert(controller._pulling === false);\n        assert(controller._pullAgain === false);\n\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      },\n      r => {\n        ReadableByteStreamControllerError(controller, r);\n      }\n  )\n      .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n  assert(underlyingByteSource !== undefined);\n\n  const controller = Object.create(ReadableByteStreamController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingByteSource, 'start', [controller]);\n  }\n\n  const pullAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingByteSource, 'pull', 0, [controller]);\n  const cancelAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingByteSource, 'cancel', 1, []);\n\n  let autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize !== undefined) {\n    autoAllocateChunkSize = Number(autoAllocateChunkSize);\n    if (Number.isInteger(autoAllocateChunkSize) === false || autoAllocateChunkSize <= 0) {\n      throw new RangeError('autoAllocateChunkSize must be a positive integer');\n    }\n  }\n\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark,\n                                    autoAllocateChunkSize);\n}\n\nfunction SetUpReadableStreamBYOBRequest(request, controller, view) {\n  assert(IsReadableByteStreamController(controller) === true);\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view) === true);\n  assert(IsDetachedBuffer(view.buffer) === false);\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n\n// Helper functions for the readers.\n\nfunction readerLockException(name) {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n\nfunction defaultReaderClosedPromiseInitialize(reader) {\n  reader._closedPromise = new Promise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nfunction defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n  reader._closedPromise = Promise.reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseInitializeAsResolved(reader) {\n  reader._closedPromise = Promise.resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseReject(reader, reason) {\n  assert(reader._closedPromise_resolve !== undefined);\n  assert(reader._closedPromise_reject !== undefined);\n\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseResetToRejected(reader, reason) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  reader._closedPromise = Promise.reject(reason);\n}\n\nfunction defaultReaderClosedPromiseResolve(reader) {\n  assert(reader._closedPromise_resolve !== undefined);\n  assert(reader._closedPromise_reject !== undefined);\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction byobReaderBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name) {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n\n// Helper function for ReadableStream pipeThrough\n\nfunction ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(promise) {\n  try {\n    // This relies on the brand-check that is enforced by Promise.prototype.then(). As with the rest of the reference\n    // implementation, it doesn't attempt to do the right thing if someone has modified the global environment.\n    Promise.prototype.then.call(promise, undefined, () => {});\n  } catch (e) {\n    // The brand check failed, therefore the internal slot is not present and there's nothing further to do.\n  }\n}\n","'use strict';\nconst { createDataProperty } = require('./helpers.js');\n\nmodule.exports = class ByteLengthQueuingStrategy {\n  constructor({ highWaterMark }) {\n    createDataProperty(this, 'highWaterMark', highWaterMark);\n  }\n\n  size(chunk) {\n    return chunk.byteLength;\n  }\n};\n","'use strict';\nconst { createDataProperty } = require('./helpers.js');\n\nmodule.exports = class CountQueuingStrategy {\n  constructor({ highWaterMark }) {\n    createDataProperty(this, 'highWaterMark', highWaterMark);\n  }\n\n  size() {\n    return 1;\n  }\n};\n","'use strict';\nconst assert = require('better-assert');\n\n// Calls to verbose() are purely for debugging the reference implementation and tests. They are not part of the standard\n// and do not appear in the standard text.\nconst verbose = require('debug')('streams:transform-stream:verbose');\nconst { InvokeOrNoop, CreateAlgorithmFromUnderlyingMethod, PromiseCall, typeIsObject,\n        ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction } = require('./helpers.js');\nconst { CreateReadableStream, ReadableStreamDefaultControllerClose, ReadableStreamDefaultControllerEnqueue,\n        ReadableStreamDefaultControllerError, ReadableStreamDefaultControllerGetDesiredSize,\n        ReadableStreamDefaultControllerHasBackpressure,\n        ReadableStreamDefaultControllerCanCloseOrEnqueue } = require('./readable-stream.js');\nconst { CreateWritableStream, WritableStreamDefaultControllerErrorIfNeeded } = require('./writable-stream.js');\n\n// Class TransformStream\n\nclass TransformStream {\n  constructor(transformer = {}, writableStrategy = {}, readableStrategy = {}) {\n    const writableSizeFunction = writableStrategy.size;\n    let writableHighWaterMark = writableStrategy.highWaterMark;\n    const readableSizeFunction = readableStrategy.size;\n    let readableHighWaterMark = readableStrategy.highWaterMark;\n\n    const writableType = transformer.writableType;\n\n    if (writableType !== undefined) {\n      throw new RangeError('Invalid writable type specified');\n    }\n\n    const writableSizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(writableSizeFunction);\n    if (writableHighWaterMark === undefined) {\n      writableHighWaterMark = 1;\n    }\n    writableHighWaterMark = ValidateAndNormalizeHighWaterMark(writableHighWaterMark);\n\n    const readableType = transformer.readableType;\n\n    if (readableType !== undefined) {\n      throw new RangeError('Invalid readable type specified');\n    }\n\n    const readableSizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(readableSizeFunction);\n    if (readableHighWaterMark === undefined) {\n      readableHighWaterMark = 0;\n    }\n    readableHighWaterMark = ValidateAndNormalizeHighWaterMark(readableHighWaterMark);\n\n    let startPromise_resolve;\n    const startPromise = new Promise(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                              readableSizeAlgorithm);\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    const startResult = InvokeOrNoop(transformer, 'start', [this._transformStreamController]);\n    startPromise_resolve(startResult);\n  }\n\n  get readable() {\n    if (IsTransformStream(this) === false) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  get writable() {\n    if (IsTransformStream(this) === false) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\n// Transform Stream Abstract Operations\n\nfunction CreateTransformStream(startAlgorithm, transformAlgorithm, flushAlgorithm, writableHighWaterMark = 1,\n                               writableSizeAlgorithm = () => 1, readableHighWaterMark = 0,\n                               readableSizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve;\n  const startPromise = new Promise(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm,\n                                   readableHighWaterMark, readableSizeAlgorithm) {\n  function startAlgorithm() {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk) {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason) {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm() {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm() {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason) {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return Promise.resolve();\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined;\n  stream._backpressureChangePromise = undefined;\n  stream._backpressureChangePromise_resolve = undefined;\n  TransformStreamSetBackpressure(stream, true);\n\n  // Used by IsWritableStream() which is called by SetUpTransformStreamDefaultController().\n  stream._transformStreamController = undefined;\n}\n\nfunction IsTransformStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream, e) {\n  verbose('TransformStreamError()');\n\n  ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure === true) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream, backpressure) {\n  verbose(`TransformStreamSetBackpressure() [backpressure = ${backpressure}]`);\n\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = new Promise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\nclass TransformStreamDefaultController {\n  constructor() {\n    throw new TypeError('TransformStreamDefaultController instances cannot be created directly');\n  }\n\n  get desiredSize() {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n  }\n\n  enqueue(chunk) {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  error(reason) {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  terminate() {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n  assert(IsTransformStream(stream) === true);\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n  assert(transformer !== undefined);\n\n  const controller = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = chunk => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk);\n      return Promise.resolve();\n    } catch (transformResultE) {\n      return Promise.reject(transformResultE);\n    }\n  };\n  const transformMethod = transformer.transform;\n  if (transformMethod !== undefined) {\n    if (typeof transformMethod !== 'function') {\n      throw new TypeError('transform is not a method');\n    }\n    transformAlgorithm = chunk => PromiseCall(transformMethod, transformer, [chunk, controller]);\n  }\n\n  const flushAlgorithm = CreateAlgorithmFromUnderlyingMethod(transformer, 'flush', 0, [controller]);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller) {\n  controller._transformAlgorithm = undefined;\n  controller._flushAlgorithm = undefined;\n}\n\nfunction TransformStreamDefaultControllerEnqueue(controller, chunk) {\n  verbose('TransformStreamDefaultControllerEnqueue()');\n\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController;\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === false) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure === true);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller, e) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromise.catch(r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate(controller) {\n  verbose('TransformStreamDefaultControllerTerminate()');\n\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController;\n\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === true) {\n    ReadableStreamDefaultControllerClose(readableController);\n  }\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n  verbose('TransformStreamDefaultSinkWriteAlgorithm()');\n\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure === true) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return backpressureChangePromise\n        .then(() => {\n          const writable = stream._writable;\n          const state = writable._state;\n          if (state === 'erroring') {\n            throw writable._storedError;\n          }\n          assert(state === 'writable');\n          return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n        });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return Promise.resolve();\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm(stream) {\n  verbose('TransformStreamDefaultSinkCloseAlgorithm()');\n\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return flushPromise.then(() => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    const readableController = readable._readableStreamController;\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === true) {\n      ReadableStreamDefaultControllerClose(readableController);\n    }\n  }).catch(r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream) {\n  verbose('TransformStreamDefaultSourcePullAlgorithm()');\n\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure === true);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\nmodule.exports = { CreateTransformStream, TransformStream };\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name) {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n"],"names":["NumberIsInteger","Number","isInteger","value","isFinite","Math","floor","SymbolPolyfill","Symbol","iterator","description","noop","NumberIsNaN","isNaN","x","isFakeDetached","o","p","v","defineProperty","elements","slice","dest","destOffset","src","srcOffset","n","Uint8Array","set","exports","IsNonNegativeNumber","Infinity","Number.isNaN","Call","F","V","args","TypeError","Function","prototype","apply","call","underlyingObject","methodName","algoArgCount","extraArgs","method","undefined","PromiseCall","fullArgs","arg","concat","Promise","resolve","O","P","reject","transferredIshVersion","highWaterMark","RangeError","size","chunk","assert","AssertionError","e","IsFiniteNonNegativeNumber","require$$0","pair","container","_queue","shift","_queueTotalSize","push","verbose","CreateAlgorithmFromUnderlyingMethod","require$$1","InvokeOrNoop","ValidateAndNormalizeHighWaterMark","MakeSizeAlgorithmFromSizeFunction","typeIsObject","rethrowAssertionErrorRejection","require$$2","DequeueValue","require$$3","EnqueueValueWithSize","PeekQueueValue","ResetQueue","AbortSteps","ErrorSteps","WritableStream","underlyingSink","strategy","type","sizeAlgorithm","abort","reason","IsWritableStream","streamBrandCheckException","IsWritableStreamLocked","WritableStreamAbort","getWriter","AcquireWritableStreamDefaultWriter","stream","WritableStreamDefaultWriter","CreateWritableStream","startAlgorithm","writeAlgorithm","closeAlgorithm","abortAlgorithm","Object","create","controller","WritableStreamDefaultController","InitializeWritableStream","_state","_storedError","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","hasOwnProperty","state","_promise","wasAlreadyErroring","promise","WritableStreamAddWriteRequest","writeRequest","WritableStreamDealWithRejection","error","WritableStreamStartErroring","writer","WritableStreamHasOperationMarkedInFlight","_started","WritableStreamFinishErroring","storedError","_reject","abortRequest","_wasAlreadyErroring","_reason","then","_resolve","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamFinishInFlightClose","WritableStreamFinishInFlightCloseWithError","WritableStreamCloseQueuedOrInFlight","WritableStreamMarkCloseRequestInFlight","WritableStreamMarkFirstWriteRequestInFlight","WritableStreamRejectCloseAndClosedPromiseIfNeeded","_closedPromise","catch","WritableStreamUpdateBackpressure","backpressure","_ownerWritableStream","_readyPromise","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultWriterAbort","close","WritableStreamDefaultWriterClose","releaseLock","write","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriterGetDesiredSize","closeRequest","WritableStreamDefaultWriterCloseWithErrorPropagation","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","WritableStreamDefaultWriterEnsureReadyPromiseRejected","_readyPromiseState","WritableStreamDefaultControllerGetDesiredSize","WritableStreamDefaultWriterRelease","releasedError","chunkSize","WritableStreamDefaultControllerGetChunkSize","IsWritableStreamDefaultController","_controlledWritableStream","result","_abortAlgorithm","SetUpWritableStreamDefaultController","_strategySizeAlgorithm","_strategyHWM","_writeAlgorithm","_closeAlgorithm","WritableStreamDefaultControllerGetBackpressure","startResult","startPromise","r","SetUpWritableStreamDefaultControllerFromUnderlyingSink","WritableStreamDefaultControllerClearAlgorithms","WritableStreamDefaultControllerClose","chunkSizeE","WritableStreamDefaultControllerWrite","writeRecord","enqueueE","WritableStreamDefaultControllerAdvanceQueueIfNeeded","length","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamDefaultControllerProcessClose","sinkClosePromise","WritableStreamDefaultControllerProcessWrite","sinkWritePromise","desiredSize","WritableStreamDefaultControllerError","name","defaultWriterClosedPromiseInitialize","_closedPromise_resolve","_closedPromise_reject","defaultWriterClosedPromiseInitializeAsRejected","defaultWriterClosedPromiseInitializeAsResolved","defaultWriterClosedPromiseReject","defaultWriterClosedPromiseResetToRejected","defaultWriterClosedPromiseResolve","defaultWriterReadyPromiseInitialize","_readyPromise_resolve","_readyPromise_reject","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseReset","defaultWriterReadyPromiseResetToRejected","defaultWriterReadyPromiseResolve","ArrayBufferCopy","IsDetachedBuffer","TransferArrayBuffer","createArrayFromList","CancelSteps","PullSteps","ReadableStream","underlyingSource","typeString","String","cancel","IsReadableStream","IsReadableStreamLocked","ReadableStreamCancel","getReader","mode","AcquireReadableStreamDefaultReader","AcquireReadableStreamBYOBReader","pipeThrough","options","writable","readable","pipeTo","preventClose","preventAbort","preventCancel","Boolean","reader","shuttingDown","currentWrite","pipeLoop","ReadableStreamDefaultReaderRead","done","destClosed","err","waitForWritesToFinish","oldCurrentWrite","isOrBecomesErrored","action","isOrBecomesClosed","shutdownWithAction","originalIsError","originalError","doTheRest","finalize","newError","shutdown","isError","tee","branches","ReadableStreamTee","ReadableStreamBYOBReader","ReadableStreamDefaultReader","CreateReadableStream","pullAlgorithm","cancelAlgorithm","ReadableStreamDefaultController","CreateReadableByteStream","autoAllocateChunkSize","ReadableByteStreamController","InitializeReadableStream","_reader","_disturbed","IsReadableStreamDisturbed","cloneForBranch2","closedOrErrored","canceled1","canceled2","reason1","reason2","branch1","branch2","resolveCancelPromise","cancelPromise","_readableStreamController","value1","value2","cancel1Algorithm","compositeReason","cancelResult","cancel2Algorithm","ReadableStreamAddReadIntoRequest","forAuthorCode","readIntoRequest","_readIntoRequests","ReadableStreamAddReadRequest","readRequest","_readRequests","sourceCancelPromise","ReadableStreamClose","IsReadableStreamDefaultReader","_forAuthorCode","ReadableStreamCreateReadResult","obj","ReadableStreamError","ReadableStreamFulfillReadIntoRequest","ReadableStreamFulfillReadRequest","ReadableStreamGetNumReadIntoRequests","ReadableStreamGetNumReadRequests","ReadableStreamHasBYOBReader","IsReadableStreamBYOBReader","ReadableStreamHasDefaultReader","defaultReaderBrandCheckException","_ownerReadableStream","readerLockException","ReadableStreamReaderGenericCancel","read","IsReadableByteStreamController","byobReaderBrandCheckException","view","ArrayBuffer","isView","buffer","byteLength","ReadableStreamBYOBReaderRead","ReadableStreamReaderGenericInitialize","ReadableStreamReaderGenericRelease","ReadableByteStreamControllerPullInto","IsReadableStreamDefaultController","defaultControllerBrandCheckException","ReadableStreamDefaultControllerCanCloseOrEnqueue","enqueue","ReadableStreamDefaultControllerEnqueue","_cancelAlgorithm","_controlledReadableStream","_closeRequested","pendingPromise","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCallPullIfNeeded","shouldPull","ReadableStreamDefaultControllerShouldCallPull","_pulling","_pullAgain","pullPromise","_pullAlgorithm","ReadableStreamDefaultControllerClearAlgorithms","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerHasBackpressure","SetUpReadableStreamDefaultController","SetUpReadableStreamDefaultControllerFromUnderlyingSource","ReadableStreamBYOBRequest","respond","bytesWritten","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_associatedReadableByteStreamController","_view","respondWithNewView","byteStreamControllerBrandCheckException","_controlledReadableByteStream","_pendingPullIntos","firstDescriptor","bytesFilled","entry","byteOffset","viewE","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","_byobRequest","byobRequest","ReadableByteStreamControllerGetDesiredSize","ReadableByteStreamControllerCallPullIfNeeded","ReadableByteStreamControllerShouldCallPull","ReadableByteStreamControllerClearPendingPullIntos","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","readerType","elementSize","ctor","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableByteStreamControllerHandleQueueDrain","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","constructor","DataView","BYTES_PER_ELEMENT","emptyView","ReadableByteStreamControllerRespondInClosedState","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerRespondInReadableState","remainderSize","end","remainder","ReadableByteStreamControllerRespondInternal","descriptor","ReadableByteStreamControllerClearAlgorithms","ReadableByteStreamControllerClose","firstPendingPullInto","ReadableByteStreamControllerEnqueue","transferredBuffer","transferredView","ReadableByteStreamControllerError","ReadableByteStreamControllerRespond","ReadableByteStreamControllerRespondWithNewView","SetUpReadableByteStreamController","SetUpReadableByteStreamControllerFromUnderlyingSource","underlyingByteSource","Number.isInteger","SetUpReadableStreamBYOBRequest","request","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseInitializeAsRejected","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","defaultReaderClosedPromiseResolve","ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue","createDataProperty","TransformStream","transformer","writableStrategy","readableStrategy","writableSizeFunction","writableHighWaterMark","readableSizeFunction","readableHighWaterMark","writableType","writableSizeAlgorithm","readableType","readableSizeAlgorithm","startPromise_resolve","_transformStreamController","IsTransformStream","_readable","_writable","CreateTransformStream","transformAlgorithm","flushAlgorithm","TransformStreamDefaultController","InitializeTransformStream","TransformStreamDefaultSinkWriteAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSourcePullAlgorithm","_backpressureChangePromise","_backpressureChangePromise_resolve","TransformStreamError","TransformStreamErrorWritableAndUnblockWrite","TransformStreamSetBackpressure","IsTransformStreamDefaultController","terminate","readableController","_controlledTransformStream","SetUpTransformStreamDefaultController","_transformAlgorithm","_flushAlgorithm","SetUpTransformStreamDefaultControllerFromTransformer","transformResultE","transformMethod","transform","TransformStreamDefaultControllerClearAlgorithms","TransformStreamDefaultControllerEnqueue","TransformStreamDefaultControllerError","TransformStreamDefaultControllerPerformTransform","transformPromise","TransformStreamDefaultControllerTerminate","backpressureChangePromise","flushPromise"],"mappings":"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"}